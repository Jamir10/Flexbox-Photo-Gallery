*{
    box-sizing:border-box;
}
    /* Normalize your box model by creating a * selector and setting 
    the box-sizing property to border-box.
    */

@media (max-width: 800px) {
    #gallery img {width:50%}
    }
    /*Create a media query for screens smaller than 800px in width. 
    In that media query, create a #gallery img rule and set the width 
    property to 50%. This will convert your gallery to a two-column 
    layout.
    */
@media (max-width: 600px) {
    #gallery img { width: 100%}
    }

#gallery img{ /* from <div id=gallery */
    width: 25%;
    /*Your images are currently too large, and you will not be able 
    to see your CSS changes.
    Create a #gallery img selector to target your images. Give it a 
    width property set to 25%.
    */
    height: 300px;
    object-fit: cover;
    /*Notice how some of your images have become distorted. This is 
    because the images have different aspect ratios. Rather than 
    setting each aspect ratio individually, you can use the object-fit 
    property to determine how images should behave.
    Give your #gallery img selector the object-fit property and set it 
    to cover. This will tell the image to fill the img container while 
    maintaining aspect ratio, resulting in cropping to fit.
    */
    margin-top: 8px; /*Your images need some space between them.*/
    padding: 0 4px; /*Your images need some space between them.*/
    border-radius: 10px;
    
}
body{
    margin: 0;
    font-family: Arial;
    background: #EBE7E7;
}
.header{
    text-align: center;
    padding: 32;
    background: #E0DDDD;
}
#gallery {
    display: flex; /*Flexbox is a ONE-DIMENSIONAL (row or column)CSS layout 
    approach that focuses on the flow of content. It offers the 
    ability to control the way items are spaced and aligned within 
    a container.
    To set an element to use Flexbox, you give it a display property 
    set to flex. Create a #gallery selector and give it that property.
    */
    flex-direction: row;
    /*Flexbox can be thought of as having two axes, the main axis and 
    the cross axis. The main axis is determined by the flex-direction 
    property. If flex-direction is set to row or row-reverse, the main 
    axis is horizontal. If flex-direction is set to column or 
    column-reverse, the main axis is vertical.
    */
    flex-wrap: wrap;
    /*The flex-wrap property determines how your items should behave 
    when the flex container is too small. Setting this property to 
    wrap will allow your items to wrap to the next row/column 
    (depending on your main axis), where nowrap will prevent your 
    items from wrapping. When this is set to nowrap, items may either 
    shrink to fit or overflow.
    Give the #gallery selector a flex-wrap property set to wrap. You 
    should see your images take a four-column layout. This is because 
    you set their width to 25% in an earlier step.
    */
    justify-content: center; /* The last 2 photos positioned in the middle */
    /*The justify-content property determines how the items inside a 
    flex container are positioned along the main axis, affecting their 
    position and the space around them.
    Give your #gallery selector a justify-content property set to 
    center.
    */
    align-items: center;
    /*The align-items property positions the flex content along the 
    cross axis. In this case, with your flex-direction set to row, 
    your cross axis would be vertical.
    */
    padding: 0 4px;
  }